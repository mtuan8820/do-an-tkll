/*
 * sch.c
 *
 *  Created on: May 9, 2023
 *      Author: Hello
 */
#include "main.h"
#include "sch.h"
#include "lcd16x2.h"
sTask SCH_tasks_G[SCH_MAX_TASKS];

//size of tasks array
int size = 0;

void SCH_Init ( void ) {
	unsigned char i ;
	for ( i = 0; i < SCH_MAX_TASKS; i ++) {
		SCH_Delete_Task( i ) ;
	}
	// Reset the global error variable
	// − SCH_Delete_Task () w ill generate an error code ,
	// ( because the task array i s empty)
}

/*−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−*−
SCH_Add_Task () Causes a task ( function ) to be executed at regular inter val s
or aft e r a user−defined delay
−*−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−*/
void insert_task(index, void (* pFunction) () , unsigned int DELAY, unsigned int PERIOD){
	//insert new task in to index
	SCH_tasks_G[index].Period = PERIOD;
	SCH_tasks_G[index].Delay = DELAY;
	SCH_tasks_G[index].RunMe = 0;
	SCH_tasks_G[index].pTask = pFunction;
}

void SCH_Add_Task( void (* pFunction) () , unsigned int DELAY, unsigned int PERIOD) {
	if (size == 0) {
		insert_task(0, pFunction, DELAY, PERIOD);
		size ++;
		return;
	}
	if (size == SCH_MAX_TASKS){
		//not enough memory
		return;
	}
	//calcatulate sum of previous task delay
	//sum(n)<delay<sum(n+1)
	//if n not found, insert new task into tail of tasks array
	int sum = 0;
	int isFound = 0;
	int isUpdated = 0;
	sTask temp;
	int newDelay = 0;
	for (int i = 0; i<size; i++) {
		if (!isFound){
			if (sum >= DELAY){
				isFound = 1;
				//store value of current task
				temp = SCH_tasks_G[i];
				//insert new task to this index
				//calculate new delay = delay - previous_task.delay
				if (i == 0) newDelay = DELAY;
				else newDelay = DELAY - SCH_tasks_G[i - 1].Delay;

				insert_task(i, pFunction, DELAY, PERIOD);

			}
			else {
				sum+=SCH_tasks_G[i].Delay;
			}
		}
		else {
			//after find index, update the rest of array delay

			//swap temp and SCH_tasks_G[i]
			sTask newTemp = SCH_tasks_G[i];
			SCH_tasks_G[i] = temp;
			temp = newTemp;

			//update index n + 1
			if (!isUpdated){
				isUpdated = 1;
				SCH_tasks_G.Delay -= newDelay;
			}
		}

	}

	int isFound = 0;
}

void SCH_Update( void ) {
	unsigned char Index ;
	// NOTE: calculations are in *TICKS* ( not milliseconds )

	for ( Index = 0; Index < SCH_MAX_TASKS; Index++) {

		// Check if there is a task at this location
		if ( SCH_tasks_G[ Index ].pTask) {
			if ( SCH_tasks_G[ Index ].Delay == 0) {
				// The task i s due to run
				// Inc . the ’RunMe’ fl a g
				SCH_tasks_G[ Index ].RunMe += 1;
				if ( SCH_tasks_G[ Index ].Period ) {
					// Schedule periodic tasks to run again
					SCH_tasks_G[ Index ].Delay = SCH_tasks_G[ Index ].Period ;
				}
			}
			else {
			// Not yet ready to run : ju st decrement the delay
			SCH_tasks_G[ Index ].Delay -- ;
			}
		}
	}
}

void SCH_Dispatch_Tasks( void ) {
	unsigned char Index ;
	// Dispatches ( runs ) the next task ( i f one i s ready )
	for ( Index = 0; Index < SCH_MAX_TASKS; Index++) {
		if ( SCH_tasks_G[ Index ].RunMe > 0) {
			(* SCH_tasks_G[ Index ].pTask) () ; // Run the task
			SCH_tasks_G[ Index ].RunMe--; // Reset / reduce RunMe fl a g
			// Periodic tasks w ill automatically run again
			// − i f thi s i s a ’one shot ’ task , remove i t from the array
			if ( SCH_tasks_G[ Index ] . Period == 0)
			{
				SCH_Delete_Task( Index ) ;
			}
		}
	}
}

/*−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−*/
void SCH_Delete_Task( int TASK_INDEX) {
	SCH_tasks_G[TASK_INDEX ] . pTask = 0x0000 ;
	SCH_tasks_G[TASK_INDEX ] . Delay = 0;
	SCH_tasks_G[TASK_INDEX ] . Period = 0;
	SCH_tasks_G[TASK_INDEX ] .RunMe = 0;
}
